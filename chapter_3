{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNDsowI7uzAJvlMZSgAA5Hk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### 1. Define a function named my_greet that prints \"Welcome.\" and call this function twice to print this greeting twice.\n"],"metadata":{"id":"nArMGvv0y1gr"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0GHnrRPNxZFv","executionInfo":{"status":"ok","timestamp":1684935089539,"user_tz":-120,"elapsed":15,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"1681cbd5-941c-4893-9a24-0e155a849969"},"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome.\n","Welcome.\n"]}],"source":[" def my_greet():\n","  print(\"Welcome.\")\n","my_greet()\n","my_greet()"]},{"cell_type":"markdown","source":["### 2. Implement the max2(m, n) function, which takes two parameters named m and n, and returns the larger of these two values, and the min2(m, n) which also takes two parameters named m and n and returns the smaller of these two values. Assign 100 and 200 as arguments and call two functions to check the results."],"metadata":{"id":"FbyShGPNAbDO"}},{"cell_type":"code","source":["def max2(m, n): #defining the max2(m,n) function\n","  if m > n: #checking if m is greater than n\n","    return m #in which case return m\n","  elif m == n:\n","    return \"{},{} have the same value.\".format(m,n)\n","  else: \n","    return n #otherwise return n\n","\n","def min2(m, n): #defining the min2(m,n) function\n","  if m < n: #checking if m is smaller than n\n","    return m #in which case return m\n","  elif m == n:\n","    return \"{},{} have the same value.\".format(m,n)\n","  else:\n","    return n #otherwise return n\n","\n","#assigning values to m and n\n","m = 100\n","n = 300\n","print(max2(m, n))\n","print(min2(m, n))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2a0y1oGZAWl9","executionInfo":{"status":"ok","timestamp":1684935089540,"user_tz":-120,"elapsed":13,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"6678eb43-4794-438d-a0e3-0555792123c5"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["300\n","100\n"]}]},{"cell_type":"markdown","source":["### 3. We want to change the value of the mile, the unit mainly used in the United States, to the value of the kilometer, the international standard unit. Implement the mile2km(mi) function that takes a mile value as a parameter and returns it in kilometers and calls this function to output 1 to 5 miles as kilometers. In this case, use for - in range to make it repeatable. (Define 1 mile as 1.61 km.)"],"metadata":{"id":"rCruQAPnBx7x"}},{"cell_type":"code","source":["def mile2km(mi): #defining the mile2km function\n","  return mi*1.61 #that returns the km from miles\n","\n","for i in range(1,6): #itearting over the numbers from 1 to 5\n","  if i > 1: #checking if the number is bigger than 1\n","    print(\"{} miles is equal to {} km.\".format(i,mile2km(i))) #in which case we print this output\n","  else: #in any other case, it means if i is 1\n","        print(\"{} mile is equal to {} km.\".format(i,mile2km(i))) #print this output, that doesnÂ´t say miles but mile"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qghOGQ-kBPB0","executionInfo":{"status":"ok","timestamp":1684935089540,"user_tz":-120,"elapsed":12,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"2fca561d-5bcb-4bfa-e458-52099fe9701c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["1 mile is equal to 1.61 km.\n","2 miles is equal to 3.22 km.\n","3 miles is equal to 4.83 km.\n","4 miles is equal to 6.44 km.\n","5 miles is equal to 8.05 km.\n"]}]},{"cell_type":"markdown","source":["### 4. Implement the cel2fah(cel) function that takes a temperature in Celsius (Celsius) as a parameter and returns it in Fahrenheit. Then, call this function to change from 10 to 50 degrees Celsius in units of 10 degrees, and output it in Fahrenheit temperature as the following result."],"metadata":{"id":"zR9HL-T7ED1d"}},{"cell_type":"code","source":["def cel2fah(cel):\n","  return round(cel*33.8, 1)\n","\n","for cel in range(10,51,10):\n","  print(\"{} degrees celsius = {} degrees Fahrenheit\".format(cel, cel2fah(cel)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0jnmVWK5CUNS","executionInfo":{"status":"ok","timestamp":1684935089540,"user_tz":-120,"elapsed":11,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"679f6549-879e-4c03-e56d-41fb8de8a815"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["10 degrees celsius = 338.0 degrees Fahrenheit\n","20 degrees celsius = 676.0 degrees Fahrenheit\n","30 degrees celsius = 1014.0 degrees Fahrenheit\n","40 degrees celsius = 1352.0 degrees Fahrenheit\n","50 degrees celsius = 1690.0 degrees Fahrenheit\n"]}]},{"cell_type":"markdown","source":["### 5. Let the user input three integers a, b, and c. And print the average, maximum, and minimum values of these three numbers as follows. In this case, mean3(a, b, c), max3(a, b, c), min3(a, b, c) that takes three numbers as parameters and returns the average, maximum, and minimum values of these three numbers. Define and call each function."],"metadata":{"id":"6CDCRig8FCoI"}},{"cell_type":"code","source":["def mean3(a, b, c): #defining the mean3() \n","  return (a + b + c)/3 #that will return the mean of the three integers inputted\n","\n","def max3(a, b, c): #defining the max3() \n","  return max(a,b,c) #that will return the max of the three integers inputted\n","\n","def min3(a, b, c):#defining the min3() \n","  return min(a,b,c) #that will return the min of the three integers inputted\n","\n","while True:\n","  try:\n","    a, b, c = map(int, input(\"Please enter 3 integers separated by comma: \").split(sep = \",\")) #taking three integers as an input\n","    break\n","  except ValueError:\n","    print(\"Please enter 3 integers!\")\n","\n","print(\"The mean of the numbers {}, {}, {} is equal to {}.\".format(a, b, c, mean3(a, b, c)))\n","print(\"The mean of the numbers {}, {}, {} is equal to {}.\".format(a, b, c, max3(a, b, c)))\n","print(\"The mean of the numbers {}, {}, {} is equal to {}.\".format(a, b, c, min3(a, b, c)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4jeDJUuHEnbE","executionInfo":{"status":"ok","timestamp":1684935096146,"user_tz":-120,"elapsed":6616,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"1f6d2c6f-93a7-460a-e5a9-1016ac9104a0"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Please enter 3 integers separated by comma: 1,2,3\n","The mean of the numbers 1, 2, 3 is equal to 2.0.\n","The mean of the numbers 1, 2, 3 is equal to 3.\n","The mean of the numbers 1, 2, 3 is equal to 1.\n"]}]},{"cell_type":"markdown","source":["### 6. Let's take a number n as input and find the sum from 1 to n. Write this function using a recursive function call."],"metadata":{"id":"4lDWRFh5Lufr"}},{"cell_type":"code","source":["while True:\n","  try:\n","    n = int(input(\"Enter an integer: \"))\n","    if n >= 1:\n","      break\n","    else:\n","      raise ValueError\n","  except ValueError:\n","    print(\"Please enter a new value!\")\n","\n","def sum2n(n):\n","  if n > 1:\n","    print(\"The sum of the numbers between 1 and {} is: {}.\".format(n, sum(list(range(1,n+1)))))\n","  else:\n","    return 1\n","print(sum2n(n))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9S2Tn_TjHuIm","executionInfo":{"status":"ok","timestamp":1684935099733,"user_tz":-120,"elapsed":3594,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"07ee96ef-f4a7-4cf1-e90c-b62af86980e1"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter an integer: 5\n","The sum of the numbers between 1 and 5 is: 15.\n","None\n"]}]},{"cell_type":"code","source":["while True:\n","  try:\n","    n = int(input(\"Enter an integer: \"))\n","    if n >= 1:\n","      break\n","    else:\n","      raise ValueError\n","  except ValueError:\n","    print(\"Please enter a new value!\")\n","\n","def sum2n(n):\n","  if n == 1:\n","    return 1\n","  else:\n","    print(\"The sum of the numbers between 1 and {} is: {}.\".format(n, (sum2n(n-1)+n)))\n","sum2n(n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"_MQvsvR3g6Gs","executionInfo":{"status":"error","timestamp":1684935102363,"user_tz":-120,"elapsed":2658,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"f0ecdfc2-4ac7-47cd-cb20-12992f6e7c0b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter an integer: 5\n","The sum of the numbers between 1 and 2 is: 3.\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-f28d3aca5620>\u001b[0m in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The sum of the numbers between 1 and {} is: {}.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-7-f28d3aca5620>\u001b[0m in \u001b[0;36msum2n\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The sum of the numbers between 1 and {} is: {}.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-7-f28d3aca5620>\u001b[0m in \u001b[0;36msum2n\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The sum of the numbers between 1 and {} is: {}.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-7-f28d3aca5620>\u001b[0m in \u001b[0;36msum2n\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The sum of the numbers between 1 and {} is: {}.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0msum2n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'NoneType' and 'int'"]}]},{"cell_type":"markdown","source":["### 7. Python has the ** operator, which indicates a square. However, let's take x and n as inputs without using an operator and use a recursive function to output x to the nth power. Let's try to output 210 by inputting 2 as the x value and 10 as the n value as follows."],"metadata":{"id":"AbTRHgZrNr8h"}},{"cell_type":"code","source":["while True:\n","  try:\n","    x, n = map(int, input(\"Enter two integers separated by Â´,Â´: \").split(sep = \",\"))\n","    break\n","  except ValueError:\n","    print(\"Please enter the integers correctly!\")\n","\n","def power(x, n):\n","  '''Returns x to the n power.'''\n","  return x**n\n","\n","print(\"The value of {} raised to {} equals {}.\".format(x, n, power(x,n)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wOBjq3SkMhHI","executionInfo":{"status":"ok","timestamp":1684935116468,"user_tz":-120,"elapsed":4502,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"24cd52e6-d085-4560-d5bb-4795e9af431b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter two integers separated by Â´,Â´: 1,2\n","The value of 1 raised to 2 equals 1.\n"]}]},{"cell_type":"markdown","source":["### 8. The natural number e, also called Euler's number or Napier's constant, is an irrational number used as the base of the natural logarithm. It is defined by the following formula. ( e = 1 + 1/1! + 1/2! + 1/3! + ..... + 1/n! )In this formula, let k! be defined as a function named factorial(k). Also, let's define a function called euler(n) that returns the sum of 1/0! + 1/1! to 1/n! Find the value of euler(20) to five decimal places and output it as follows. (You must use a recursive function.)"],"metadata":{"id":"DZy3wLeuO6Dd"}},{"cell_type":"code","source":["'''def factorial(n):\n","  return n * (n - 1) \n","n! = factorial(n)\n","e = 1 + 1/1! + 1/2! + 1/3! + ..... + 1/n! '''\n","\n","def euler(n):\n","  if n == 0:\n","    return 1\n","  else:\n","    return euler(n-1) + 1 / factorial(n)"],"metadata":{"id":"qXVgf09-PSUW","executionInfo":{"status":"aborted","timestamp":1684935102364,"user_tz":-120,"elapsed":5,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(round(euler(20),5))"],"metadata":{"id":"Wc6puhy4OiK3","executionInfo":{"status":"aborted","timestamp":1684935102365,"user_tz":-120,"elapsed":5,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 9. There is a list with integer element values called n_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Return even_list which only contains items of even number values from n_list by using the filter function and the lambda function. "],"metadata":{"id":"qHk12rqwgi9m"}},{"cell_type":"code","source":["n_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n","n_list_new = [] #declaring the initial integer list\n","for x in filter(lambda x: x % 2 == 0, n_list):\n","  n_list_new.append(x) #the list with the lambda and filter functions applied\n","n_list_new #checking the new list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PiV6Lt-295j6","executionInfo":{"status":"ok","timestamp":1684935866953,"user_tz":-120,"elapsed":228,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"6c181e36-4f84-4022-de77-f7f2485c938e"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10]"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["### 10. There is a list with integer unit values called n_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Return even_list which only contains items of even number values from n_list by using a lambda function. This time, do not use for statement, and instead use list function. "],"metadata":{"id":"cZvOOFLa_aHi"}},{"cell_type":"code","source":["n_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] #declaring the initial integer list\n","n_list_new = list(filter(lambda x: x % 2 == 0, n_list)) #the list with the lambda and filter functions applied\n","n_list_new #checking the new list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3j7QrpDgk9R","executionInfo":{"status":"ok","timestamp":1684935290773,"user_tz":-120,"elapsed":3,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"8a9c61ed-2490-4a14-e531-1c42c47f5786"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10]"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["### 11. Write a map function that converts a_list which contains lowercase alphabets like [âaâ, âbâ, âcâ, âdâ] to a upper_a_list which contains upper case alphabets like [âAâ, âBâ, âCâ, âDâ]. Also, define a function named to_upper that receives lowercase letters as parameters and returns uppercase letters, and convert those lowercase letters. "],"metadata":{"id":"zGPD9Wam_2oC"}},{"cell_type":"code","source":["a_list = [\"a\", \"b\", \"c\", \"d\"] #initial list of lowercase letters\n","to_upper = lambda x: x.upper() #creating the lambda function and assigning it to a variable\n","upper_a_list = list(map(to_upper, a_list)) #applying the lambda function to the a_list and transforming the final result in a list\n","upper_a_list #checking the new list of uppercase letters"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g926TNsN_91V","executionInfo":{"status":"ok","timestamp":1684936268713,"user_tz":-120,"elapsed":512,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"a0bfa630-e467-48f3-dcee-34cb42562368"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['A', 'B', 'C', 'D']"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["### 12. Compute the sum of integers from 1 to 100 by using reduce function and lambda expression inside it. Use range (1, 101) as an input. "],"metadata":{"id":"G5fdkzsaCJwN"}},{"cell_type":"code","source":["from functools import reduce #importing the function reduce() from the functools library\n","reduce(lambda x, y: x + y , range(1, 101)) #applying the reduce() function to the lambda function applied to the range given"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V7mSSk_mAe8c","executionInfo":{"status":"ok","timestamp":1684936488537,"user_tz":-120,"elapsed":6,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"b13d3bc5-1b38-4251-bc24-e3d7b55c660d"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5050"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["### 13. If you treat studentsâ scores of English, math, and science exams as list of three elements, it can be expressed as a list such as [100, 90, 95]. If there are two students, their scores can be expressed as [100, 90, 95, 90, 85, 93]. If a student did not apply to the exam of a certain subject, denote that score as 0. Print how many studentsâ scores are contained in the given scores list, the number of students with valid scores for all subjects (that is students with no 0 for all subject), and the scores of students with only valid scores. "],"metadata":{"id":"8yzfNZ2PC1UQ"}},{"cell_type":"code","source":["scores = [100, 90, 95, 90, 80, 70, 0, 80, 90, 90, 0, 90, 100, 75, 20, 30, 50, 90]\n","\n","num_students = len(scores)//3\n","\n","valid_scores = list(filter(lambda s: 0 not in s, map(lambda i: scores[i:i+3], range(0, len(scores), 3))))\n","\n","num_valid_students = len(valid_scores)\n","\n","print(num_students)\n","print(num_valid_students)\n","print(\"Scores of students with valid scores: \")\n","\n","for student_scores in valid_scores:\n","  print(student_scores)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gILXsm0yCnDm","executionInfo":{"status":"ok","timestamp":1684940008619,"user_tz":-120,"elapsed":411,"user":{"displayName":"Sabina Semenciuc","userId":"07785084639218051352"}},"outputId":"b1b3f231-38ce-47ad-e974-23a0e689db74"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["6\n","4\n","Scores of students with valid scores: \n","[100, 90, 95]\n","[90, 80, 70]\n","[100, 75, 20]\n","[30, 50, 90]\n"]}]}]}